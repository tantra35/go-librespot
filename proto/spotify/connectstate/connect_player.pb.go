// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: spotify/connectstate/connect_player.proto

package connectstate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BitrateLevel int32

const (
	BitrateLevel_UNKNOWN_BITRATE_LEVEL BitrateLevel = 0
	BitrateLevel_LOW                   BitrateLevel = 1
	BitrateLevel_NORMAL                BitrateLevel = 2
	BitrateLevel_HIGH                  BitrateLevel = 3
	BitrateLevel_VERY_HIGH             BitrateLevel = 4
	BitrateLevel_HIFI                  BitrateLevel = 5
	BitrateLevel_HIFI24                BitrateLevel = 6
)

// Enum value maps for BitrateLevel.
var (
	BitrateLevel_name = map[int32]string{
		0: "UNKNOWN_BITRATE_LEVEL",
		1: "LOW",
		2: "NORMAL",
		3: "HIGH",
		4: "VERY_HIGH",
		5: "HIFI",
		6: "HIFI24",
	}
	BitrateLevel_value = map[string]int32{
		"UNKNOWN_BITRATE_LEVEL": 0,
		"LOW":                   1,
		"NORMAL":                2,
		"HIGH":                  3,
		"VERY_HIGH":             4,
		"HIFI":                  5,
		"HIFI24":                6,
	}
)

func (x BitrateLevel) Enum() *BitrateLevel {
	p := new(BitrateLevel)
	*p = x
	return p
}

func (x BitrateLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitrateLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_spotify_connectstate_connect_player_proto_enumTypes[0].Descriptor()
}

func (BitrateLevel) Type() protoreflect.EnumType {
	return &file_spotify_connectstate_connect_player_proto_enumTypes[0]
}

func (x BitrateLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitrateLevel.Descriptor instead.
func (BitrateLevel) EnumDescriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{0}
}

type BitrateStrategy int32

const (
	BitrateStrategy_UNKNOWN_BITRATE_STRATEGY BitrateStrategy = 0
	BitrateStrategy_BEST_MATCHING            BitrateStrategy = 1
	BitrateStrategy_BACKEND_ADVISED          BitrateStrategy = 2
	BitrateStrategy_OFFLINED_FILE            BitrateStrategy = 3
	BitrateStrategy_CACHED_FILE              BitrateStrategy = 4
	BitrateStrategy_LOCAL_FILE               BitrateStrategy = 5
)

// Enum value maps for BitrateStrategy.
var (
	BitrateStrategy_name = map[int32]string{
		0: "UNKNOWN_BITRATE_STRATEGY",
		1: "BEST_MATCHING",
		2: "BACKEND_ADVISED",
		3: "OFFLINED_FILE",
		4: "CACHED_FILE",
		5: "LOCAL_FILE",
	}
	BitrateStrategy_value = map[string]int32{
		"UNKNOWN_BITRATE_STRATEGY": 0,
		"BEST_MATCHING":            1,
		"BACKEND_ADVISED":          2,
		"OFFLINED_FILE":            3,
		"CACHED_FILE":              4,
		"LOCAL_FILE":               5,
	}
)

func (x BitrateStrategy) Enum() *BitrateStrategy {
	p := new(BitrateStrategy)
	*p = x
	return p
}

func (x BitrateStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BitrateStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_spotify_connectstate_connect_player_proto_enumTypes[1].Descriptor()
}

func (BitrateStrategy) Type() protoreflect.EnumType {
	return &file_spotify_connectstate_connect_player_proto_enumTypes[1]
}

func (x BitrateStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BitrateStrategy.Descriptor instead.
func (BitrateStrategy) EnumDescriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{1}
}

type HiFiStatus int32

const (
	HiFiStatus_NONE HiFiStatus = 0
	HiFiStatus_OFF  HiFiStatus = 1
	HiFiStatus_ON   HiFiStatus = 2
)

// Enum value maps for HiFiStatus.
var (
	HiFiStatus_name = map[int32]string{
		0: "NONE",
		1: "OFF",
		2: "ON",
	}
	HiFiStatus_value = map[string]int32{
		"NONE": 0,
		"OFF":  1,
		"ON":   2,
	}
)

func (x HiFiStatus) Enum() *HiFiStatus {
	p := new(HiFiStatus)
	*p = x
	return p
}

func (x HiFiStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HiFiStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_spotify_connectstate_connect_player_proto_enumTypes[2].Descriptor()
}

func (HiFiStatus) Type() protoreflect.EnumType {
	return &file_spotify_connectstate_connect_player_proto_enumTypes[2]
}

func (x HiFiStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HiFiStatus.Descriptor instead.
func (HiFiStatus) EnumDescriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{2}
}

type PlayerState struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Timestamp             int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ContextUri            string                 `protobuf:"bytes,2,opt,name=context_uri,json=contextUri,proto3" json:"context_uri,omitempty"`
	ContextUrl            string                 `protobuf:"bytes,3,opt,name=context_url,json=contextUrl,proto3" json:"context_url,omitempty"`
	ContextRestrictions   *Restrictions          `protobuf:"bytes,4,opt,name=context_restrictions,json=contextRestrictions,proto3" json:"context_restrictions,omitempty"`
	PlayOrigin            *PlayOrigin            `protobuf:"bytes,5,opt,name=play_origin,json=playOrigin,proto3" json:"play_origin,omitempty"`
	Index                 *ContextIndex          `protobuf:"bytes,6,opt,name=index,proto3" json:"index,omitempty"`
	Track                 *ProvidedTrack         `protobuf:"bytes,7,opt,name=track,proto3" json:"track,omitempty"`
	PlaybackId            string                 `protobuf:"bytes,8,opt,name=playback_id,json=playbackId,proto3" json:"playback_id,omitempty"`
	PlaybackSpeed         float64                `protobuf:"fixed64,9,opt,name=playback_speed,json=playbackSpeed,proto3" json:"playback_speed,omitempty"`
	PositionAsOfTimestamp int64                  `protobuf:"varint,10,opt,name=position_as_of_timestamp,json=positionAsOfTimestamp,proto3" json:"position_as_of_timestamp,omitempty"`
	Duration              int64                  `protobuf:"varint,11,opt,name=duration,proto3" json:"duration,omitempty"`
	IsPlaying             bool                   `protobuf:"varint,12,opt,name=is_playing,json=isPlaying,proto3" json:"is_playing,omitempty"`
	IsPaused              bool                   `protobuf:"varint,13,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	IsBuffering           bool                   `protobuf:"varint,14,opt,name=is_buffering,json=isBuffering,proto3" json:"is_buffering,omitempty"`
	IsSystemInitiated     bool                   `protobuf:"varint,15,opt,name=is_system_initiated,json=isSystemInitiated,proto3" json:"is_system_initiated,omitempty"`
	Options               *ContextPlayerOptions  `protobuf:"bytes,16,opt,name=options,proto3" json:"options,omitempty"`
	Restrictions          *Restrictions          `protobuf:"bytes,17,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	Suppressions          *Suppressions          `protobuf:"bytes,18,opt,name=suppressions,proto3" json:"suppressions,omitempty"`
	PrevTracks            []*ProvidedTrack       `protobuf:"bytes,19,rep,name=prev_tracks,json=prevTracks,proto3" json:"prev_tracks,omitempty"`
	NextTracks            []*ProvidedTrack       `protobuf:"bytes,20,rep,name=next_tracks,json=nextTracks,proto3" json:"next_tracks,omitempty"`
	ContextMetadata       map[string]string      `protobuf:"bytes,21,rep,name=context_metadata,json=contextMetadata,proto3" json:"context_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	PageMetadata          map[string]string      `protobuf:"bytes,22,rep,name=page_metadata,json=pageMetadata,proto3" json:"page_metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SessionId             string                 `protobuf:"bytes,23,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	QueueRevision         string                 `protobuf:"bytes,24,opt,name=queue_revision,json=queueRevision,proto3" json:"queue_revision,omitempty"`
	Position              int64                  `protobuf:"varint,25,opt,name=position,proto3" json:"position,omitempty"`
	PlaybackQuality       *PlaybackQuality       `protobuf:"bytes,32,opt,name=playback_quality,json=playbackQuality,proto3" json:"playback_quality,omitempty"`
	Signals               []string               `protobuf:"bytes,33,rep,name=signals,proto3" json:"signals,omitempty"`
	SessionCommandId      string                 `protobuf:"bytes,35,opt,name=session_command_id,json=sessionCommandId,proto3" json:"session_command_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PlayerState) Reset() {
	*x = PlayerState{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerState) ProtoMessage() {}

func (x *PlayerState) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerState.ProtoReflect.Descriptor instead.
func (*PlayerState) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PlayerState) GetContextUri() string {
	if x != nil {
		return x.ContextUri
	}
	return ""
}

func (x *PlayerState) GetContextUrl() string {
	if x != nil {
		return x.ContextUrl
	}
	return ""
}

func (x *PlayerState) GetContextRestrictions() *Restrictions {
	if x != nil {
		return x.ContextRestrictions
	}
	return nil
}

func (x *PlayerState) GetPlayOrigin() *PlayOrigin {
	if x != nil {
		return x.PlayOrigin
	}
	return nil
}

func (x *PlayerState) GetIndex() *ContextIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *PlayerState) GetTrack() *ProvidedTrack {
	if x != nil {
		return x.Track
	}
	return nil
}

func (x *PlayerState) GetPlaybackId() string {
	if x != nil {
		return x.PlaybackId
	}
	return ""
}

func (x *PlayerState) GetPlaybackSpeed() float64 {
	if x != nil {
		return x.PlaybackSpeed
	}
	return 0
}

func (x *PlayerState) GetPositionAsOfTimestamp() int64 {
	if x != nil {
		return x.PositionAsOfTimestamp
	}
	return 0
}

func (x *PlayerState) GetDuration() int64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PlayerState) GetIsPlaying() bool {
	if x != nil {
		return x.IsPlaying
	}
	return false
}

func (x *PlayerState) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *PlayerState) GetIsBuffering() bool {
	if x != nil {
		return x.IsBuffering
	}
	return false
}

func (x *PlayerState) GetIsSystemInitiated() bool {
	if x != nil {
		return x.IsSystemInitiated
	}
	return false
}

func (x *PlayerState) GetOptions() *ContextPlayerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *PlayerState) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *PlayerState) GetSuppressions() *Suppressions {
	if x != nil {
		return x.Suppressions
	}
	return nil
}

func (x *PlayerState) GetPrevTracks() []*ProvidedTrack {
	if x != nil {
		return x.PrevTracks
	}
	return nil
}

func (x *PlayerState) GetNextTracks() []*ProvidedTrack {
	if x != nil {
		return x.NextTracks
	}
	return nil
}

func (x *PlayerState) GetContextMetadata() map[string]string {
	if x != nil {
		return x.ContextMetadata
	}
	return nil
}

func (x *PlayerState) GetPageMetadata() map[string]string {
	if x != nil {
		return x.PageMetadata
	}
	return nil
}

func (x *PlayerState) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *PlayerState) GetQueueRevision() string {
	if x != nil {
		return x.QueueRevision
	}
	return ""
}

func (x *PlayerState) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *PlayerState) GetPlaybackQuality() *PlaybackQuality {
	if x != nil {
		return x.PlaybackQuality
	}
	return nil
}

func (x *PlayerState) GetSignals() []string {
	if x != nil {
		return x.Signals
	}
	return nil
}

func (x *PlayerState) GetSessionCommandId() string {
	if x != nil {
		return x.SessionCommandId
	}
	return ""
}

type ProvidedTrack struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Uri               string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Uid               string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Metadata          map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Removed           []string               `protobuf:"bytes,4,rep,name=removed,proto3" json:"removed,omitempty"`
	Blocked           []string               `protobuf:"bytes,5,rep,name=blocked,proto3" json:"blocked,omitempty"`
	Provider          string                 `protobuf:"bytes,6,opt,name=provider,proto3" json:"provider,omitempty"`
	Restrictions      *Restrictions          `protobuf:"bytes,7,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	AlbumUri          string                 `protobuf:"bytes,8,opt,name=album_uri,json=albumUri,proto3" json:"album_uri,omitempty"`
	DisallowReasons   []string               `protobuf:"bytes,9,rep,name=disallow_reasons,json=disallowReasons,proto3" json:"disallow_reasons,omitempty"`
	ArtistUri         string                 `protobuf:"bytes,10,opt,name=artist_uri,json=artistUri,proto3" json:"artist_uri,omitempty"`
	DisallowUndecided []string               `protobuf:"bytes,11,rep,name=disallow_undecided,json=disallowUndecided,proto3" json:"disallow_undecided,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ProvidedTrack) Reset() {
	*x = ProvidedTrack{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProvidedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvidedTrack) ProtoMessage() {}

func (x *ProvidedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvidedTrack.ProtoReflect.Descriptor instead.
func (*ProvidedTrack) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{1}
}

func (x *ProvidedTrack) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ProvidedTrack) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ProvidedTrack) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProvidedTrack) GetRemoved() []string {
	if x != nil {
		return x.Removed
	}
	return nil
}

func (x *ProvidedTrack) GetBlocked() []string {
	if x != nil {
		return x.Blocked
	}
	return nil
}

func (x *ProvidedTrack) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ProvidedTrack) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *ProvidedTrack) GetAlbumUri() string {
	if x != nil {
		return x.AlbumUri
	}
	return ""
}

func (x *ProvidedTrack) GetDisallowReasons() []string {
	if x != nil {
		return x.DisallowReasons
	}
	return nil
}

func (x *ProvidedTrack) GetArtistUri() string {
	if x != nil {
		return x.ArtistUri
	}
	return ""
}

func (x *ProvidedTrack) GetDisallowUndecided() []string {
	if x != nil {
		return x.DisallowUndecided
	}
	return nil
}

type ContextIndex struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Track         uint32                 `protobuf:"varint,2,opt,name=track,proto3" json:"track,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextIndex) Reset() {
	*x = ContextIndex{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextIndex) ProtoMessage() {}

func (x *ContextIndex) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextIndex.ProtoReflect.Descriptor instead.
func (*ContextIndex) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{2}
}

func (x *ContextIndex) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ContextIndex) GetTrack() uint32 {
	if x != nil {
		return x.Track
	}
	return 0
}

type ModeRestrictions struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Values        map[string]*RestrictionReasons `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModeRestrictions) Reset() {
	*x = ModeRestrictions{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModeRestrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeRestrictions) ProtoMessage() {}

func (x *ModeRestrictions) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeRestrictions.ProtoReflect.Descriptor instead.
func (*ModeRestrictions) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{3}
}

func (x *ModeRestrictions) GetValues() map[string]*RestrictionReasons {
	if x != nil {
		return x.Values
	}
	return nil
}

type RestrictionReasons struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reasons       []string               `protobuf:"bytes,1,rep,name=reasons,proto3" json:"reasons,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RestrictionReasons) Reset() {
	*x = RestrictionReasons{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestrictionReasons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestrictionReasons) ProtoMessage() {}

func (x *RestrictionReasons) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestrictionReasons.ProtoReflect.Descriptor instead.
func (*RestrictionReasons) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{4}
}

func (x *RestrictionReasons) GetReasons() []string {
	if x != nil {
		return x.Reasons
	}
	return nil
}

type Restrictions struct {
	state                                     protoimpl.MessageState         `protogen:"open.v1"`
	DisallowPausingReasons                    []string                       `protobuf:"bytes,1,rep,name=disallow_pausing_reasons,json=disallowPausingReasons,proto3" json:"disallow_pausing_reasons,omitempty"`
	DisallowResumingReasons                   []string                       `protobuf:"bytes,2,rep,name=disallow_resuming_reasons,json=disallowResumingReasons,proto3" json:"disallow_resuming_reasons,omitempty"`
	DisallowSeekingReasons                    []string                       `protobuf:"bytes,3,rep,name=disallow_seeking_reasons,json=disallowSeekingReasons,proto3" json:"disallow_seeking_reasons,omitempty"`
	DisallowPeekingPrevReasons                []string                       `protobuf:"bytes,4,rep,name=disallow_peeking_prev_reasons,json=disallowPeekingPrevReasons,proto3" json:"disallow_peeking_prev_reasons,omitempty"`
	DisallowPeekingNextReasons                []string                       `protobuf:"bytes,5,rep,name=disallow_peeking_next_reasons,json=disallowPeekingNextReasons,proto3" json:"disallow_peeking_next_reasons,omitempty"`
	DisallowSkippingPrevReasons               []string                       `protobuf:"bytes,6,rep,name=disallow_skipping_prev_reasons,json=disallowSkippingPrevReasons,proto3" json:"disallow_skipping_prev_reasons,omitempty"`
	DisallowSkippingNextReasons               []string                       `protobuf:"bytes,7,rep,name=disallow_skipping_next_reasons,json=disallowSkippingNextReasons,proto3" json:"disallow_skipping_next_reasons,omitempty"`
	DisallowTogglingRepeatContextReasons      []string                       `protobuf:"bytes,8,rep,name=disallow_toggling_repeat_context_reasons,json=disallowTogglingRepeatContextReasons,proto3" json:"disallow_toggling_repeat_context_reasons,omitempty"`
	DisallowTogglingRepeatTrackReasons        []string                       `protobuf:"bytes,9,rep,name=disallow_toggling_repeat_track_reasons,json=disallowTogglingRepeatTrackReasons,proto3" json:"disallow_toggling_repeat_track_reasons,omitempty"`
	DisallowTogglingShuffleReasons            []string                       `protobuf:"bytes,10,rep,name=disallow_toggling_shuffle_reasons,json=disallowTogglingShuffleReasons,proto3" json:"disallow_toggling_shuffle_reasons,omitempty"`
	DisallowSetQueueReasons                   []string                       `protobuf:"bytes,11,rep,name=disallow_set_queue_reasons,json=disallowSetQueueReasons,proto3" json:"disallow_set_queue_reasons,omitempty"`
	DisallowInterruptingPlaybackReasons       []string                       `protobuf:"bytes,12,rep,name=disallow_interrupting_playback_reasons,json=disallowInterruptingPlaybackReasons,proto3" json:"disallow_interrupting_playback_reasons,omitempty"`
	DisallowTransferringPlaybackReasons       []string                       `protobuf:"bytes,13,rep,name=disallow_transferring_playback_reasons,json=disallowTransferringPlaybackReasons,proto3" json:"disallow_transferring_playback_reasons,omitempty"`
	DisallowRemoteControlReasons              []string                       `protobuf:"bytes,14,rep,name=disallow_remote_control_reasons,json=disallowRemoteControlReasons,proto3" json:"disallow_remote_control_reasons,omitempty"`
	DisallowInsertingIntoNextTracksReasons    []string                       `protobuf:"bytes,15,rep,name=disallow_inserting_into_next_tracks_reasons,json=disallowInsertingIntoNextTracksReasons,proto3" json:"disallow_inserting_into_next_tracks_reasons,omitempty"`
	DisallowInsertingIntoContextTracksReasons []string                       `protobuf:"bytes,16,rep,name=disallow_inserting_into_context_tracks_reasons,json=disallowInsertingIntoContextTracksReasons,proto3" json:"disallow_inserting_into_context_tracks_reasons,omitempty"`
	DisallowReorderingInNextTracksReasons     []string                       `protobuf:"bytes,17,rep,name=disallow_reordering_in_next_tracks_reasons,json=disallowReorderingInNextTracksReasons,proto3" json:"disallow_reordering_in_next_tracks_reasons,omitempty"`
	DisallowReorderingInContextTracksReasons  []string                       `protobuf:"bytes,18,rep,name=disallow_reordering_in_context_tracks_reasons,json=disallowReorderingInContextTracksReasons,proto3" json:"disallow_reordering_in_context_tracks_reasons,omitempty"`
	DisallowRemovingFromNextTracksReasons     []string                       `protobuf:"bytes,19,rep,name=disallow_removing_from_next_tracks_reasons,json=disallowRemovingFromNextTracksReasons,proto3" json:"disallow_removing_from_next_tracks_reasons,omitempty"`
	DisallowRemovingFromContextTracksReasons  []string                       `protobuf:"bytes,20,rep,name=disallow_removing_from_context_tracks_reasons,json=disallowRemovingFromContextTracksReasons,proto3" json:"disallow_removing_from_context_tracks_reasons,omitempty"`
	DisallowUpdatingContextReasons            []string                       `protobuf:"bytes,21,rep,name=disallow_updating_context_reasons,json=disallowUpdatingContextReasons,proto3" json:"disallow_updating_context_reasons,omitempty"`
	DisallowPlayingReasons                    []string                       `protobuf:"bytes,22,rep,name=disallow_playing_reasons,json=disallowPlayingReasons,proto3" json:"disallow_playing_reasons,omitempty"`
	DisallowStoppingReasons                   []string                       `protobuf:"bytes,23,rep,name=disallow_stopping_reasons,json=disallowStoppingReasons,proto3" json:"disallow_stopping_reasons,omitempty"`
	DisallowAddToQueueReasons                 []string                       `protobuf:"bytes,24,rep,name=disallow_add_to_queue_reasons,json=disallowAddToQueueReasons,proto3" json:"disallow_add_to_queue_reasons,omitempty"`
	DisallowSettingPlaybackSpeedReasons       []string                       `protobuf:"bytes,25,rep,name=disallow_setting_playback_speed_reasons,json=disallowSettingPlaybackSpeedReasons,proto3" json:"disallow_setting_playback_speed_reasons,omitempty"`
	DisallowSettingModes                      map[string]*ModeRestrictions   `protobuf:"bytes,28,rep,name=disallow_setting_modes,json=disallowSettingModes,proto3" json:"disallow_setting_modes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DisallowSignals                           map[string]*RestrictionReasons `protobuf:"bytes,29,rep,name=disallow_signals,json=disallowSignals,proto3" json:"disallow_signals,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields                             protoimpl.UnknownFields
	sizeCache                                 protoimpl.SizeCache
}

func (x *Restrictions) Reset() {
	*x = Restrictions{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Restrictions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Restrictions) ProtoMessage() {}

func (x *Restrictions) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Restrictions.ProtoReflect.Descriptor instead.
func (*Restrictions) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{5}
}

func (x *Restrictions) GetDisallowPausingReasons() []string {
	if x != nil {
		return x.DisallowPausingReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowResumingReasons() []string {
	if x != nil {
		return x.DisallowResumingReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSeekingReasons() []string {
	if x != nil {
		return x.DisallowSeekingReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowPeekingPrevReasons() []string {
	if x != nil {
		return x.DisallowPeekingPrevReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowPeekingNextReasons() []string {
	if x != nil {
		return x.DisallowPeekingNextReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSkippingPrevReasons() []string {
	if x != nil {
		return x.DisallowSkippingPrevReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSkippingNextReasons() []string {
	if x != nil {
		return x.DisallowSkippingNextReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowTogglingRepeatContextReasons() []string {
	if x != nil {
		return x.DisallowTogglingRepeatContextReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowTogglingRepeatTrackReasons() []string {
	if x != nil {
		return x.DisallowTogglingRepeatTrackReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowTogglingShuffleReasons() []string {
	if x != nil {
		return x.DisallowTogglingShuffleReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSetQueueReasons() []string {
	if x != nil {
		return x.DisallowSetQueueReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowInterruptingPlaybackReasons() []string {
	if x != nil {
		return x.DisallowInterruptingPlaybackReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowTransferringPlaybackReasons() []string {
	if x != nil {
		return x.DisallowTransferringPlaybackReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowRemoteControlReasons() []string {
	if x != nil {
		return x.DisallowRemoteControlReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowInsertingIntoNextTracksReasons() []string {
	if x != nil {
		return x.DisallowInsertingIntoNextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowInsertingIntoContextTracksReasons() []string {
	if x != nil {
		return x.DisallowInsertingIntoContextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowReorderingInNextTracksReasons() []string {
	if x != nil {
		return x.DisallowReorderingInNextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowReorderingInContextTracksReasons() []string {
	if x != nil {
		return x.DisallowReorderingInContextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowRemovingFromNextTracksReasons() []string {
	if x != nil {
		return x.DisallowRemovingFromNextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowRemovingFromContextTracksReasons() []string {
	if x != nil {
		return x.DisallowRemovingFromContextTracksReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowUpdatingContextReasons() []string {
	if x != nil {
		return x.DisallowUpdatingContextReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowPlayingReasons() []string {
	if x != nil {
		return x.DisallowPlayingReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowStoppingReasons() []string {
	if x != nil {
		return x.DisallowStoppingReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowAddToQueueReasons() []string {
	if x != nil {
		return x.DisallowAddToQueueReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSettingPlaybackSpeedReasons() []string {
	if x != nil {
		return x.DisallowSettingPlaybackSpeedReasons
	}
	return nil
}

func (x *Restrictions) GetDisallowSettingModes() map[string]*ModeRestrictions {
	if x != nil {
		return x.DisallowSettingModes
	}
	return nil
}

func (x *Restrictions) GetDisallowSignals() map[string]*RestrictionReasons {
	if x != nil {
		return x.DisallowSignals
	}
	return nil
}

type PlayOrigin struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	FeatureIdentifier     string                 `protobuf:"bytes,1,opt,name=feature_identifier,json=featureIdentifier,proto3" json:"feature_identifier,omitempty"`
	FeatureVersion        string                 `protobuf:"bytes,2,opt,name=feature_version,json=featureVersion,proto3" json:"feature_version,omitempty"`
	ViewUri               string                 `protobuf:"bytes,3,opt,name=view_uri,json=viewUri,proto3" json:"view_uri,omitempty"`
	ExternalReferrer      string                 `protobuf:"bytes,4,opt,name=external_referrer,json=externalReferrer,proto3" json:"external_referrer,omitempty"`
	ReferrerIdentifier    string                 `protobuf:"bytes,5,opt,name=referrer_identifier,json=referrerIdentifier,proto3" json:"referrer_identifier,omitempty"`
	DeviceIdentifier      string                 `protobuf:"bytes,6,opt,name=device_identifier,json=deviceIdentifier,proto3" json:"device_identifier,omitempty"`
	FeatureClasses        []string               `protobuf:"bytes,7,rep,name=feature_classes,json=featureClasses,proto3" json:"feature_classes,omitempty"`
	RestrictionIdentifier *string                `protobuf:"bytes,8,opt,name=restriction_identifier,json=restrictionIdentifier,proto3,oneof" json:"restriction_identifier,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PlayOrigin) Reset() {
	*x = PlayOrigin{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlayOrigin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayOrigin) ProtoMessage() {}

func (x *PlayOrigin) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayOrigin.ProtoReflect.Descriptor instead.
func (*PlayOrigin) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{6}
}

func (x *PlayOrigin) GetFeatureIdentifier() string {
	if x != nil {
		return x.FeatureIdentifier
	}
	return ""
}

func (x *PlayOrigin) GetFeatureVersion() string {
	if x != nil {
		return x.FeatureVersion
	}
	return ""
}

func (x *PlayOrigin) GetViewUri() string {
	if x != nil {
		return x.ViewUri
	}
	return ""
}

func (x *PlayOrigin) GetExternalReferrer() string {
	if x != nil {
		return x.ExternalReferrer
	}
	return ""
}

func (x *PlayOrigin) GetReferrerIdentifier() string {
	if x != nil {
		return x.ReferrerIdentifier
	}
	return ""
}

func (x *PlayOrigin) GetDeviceIdentifier() string {
	if x != nil {
		return x.DeviceIdentifier
	}
	return ""
}

func (x *PlayOrigin) GetFeatureClasses() []string {
	if x != nil {
		return x.FeatureClasses
	}
	return nil
}

func (x *PlayOrigin) GetRestrictionIdentifier() string {
	if x != nil && x.RestrictionIdentifier != nil {
		return *x.RestrictionIdentifier
	}
	return ""
}

type ContextPlayerOptions struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShufflingContext bool                   `protobuf:"varint,1,opt,name=shuffling_context,json=shufflingContext,proto3" json:"shuffling_context,omitempty"`
	RepeatingContext bool                   `protobuf:"varint,2,opt,name=repeating_context,json=repeatingContext,proto3" json:"repeating_context,omitempty"`
	RepeatingTrack   bool                   `protobuf:"varint,3,opt,name=repeating_track,json=repeatingTrack,proto3" json:"repeating_track,omitempty"`
	PlaybackSpeed    *float32               `protobuf:"fixed32,4,opt,name=playback_speed,json=playbackSpeed,proto3,oneof" json:"playback_speed,omitempty"`
	Modes            map[string]string      `protobuf:"bytes,5,rep,name=modes,proto3" json:"modes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContextPlayerOptions) Reset() {
	*x = ContextPlayerOptions{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPlayerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPlayerOptions) ProtoMessage() {}

func (x *ContextPlayerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPlayerOptions.ProtoReflect.Descriptor instead.
func (*ContextPlayerOptions) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{7}
}

func (x *ContextPlayerOptions) GetShufflingContext() bool {
	if x != nil {
		return x.ShufflingContext
	}
	return false
}

func (x *ContextPlayerOptions) GetRepeatingContext() bool {
	if x != nil {
		return x.RepeatingContext
	}
	return false
}

func (x *ContextPlayerOptions) GetRepeatingTrack() bool {
	if x != nil {
		return x.RepeatingTrack
	}
	return false
}

func (x *ContextPlayerOptions) GetPlaybackSpeed() float32 {
	if x != nil && x.PlaybackSpeed != nil {
		return *x.PlaybackSpeed
	}
	return 0
}

func (x *ContextPlayerOptions) GetModes() map[string]string {
	if x != nil {
		return x.Modes
	}
	return nil
}

type Suppressions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Providers     []string               `protobuf:"bytes,1,rep,name=providers,proto3" json:"providers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Suppressions) Reset() {
	*x = Suppressions{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Suppressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suppressions) ProtoMessage() {}

func (x *Suppressions) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suppressions.ProtoReflect.Descriptor instead.
func (*Suppressions) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{8}
}

func (x *Suppressions) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

type InstrumentationParams struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	InteractionIds  []string               `protobuf:"bytes,6,rep,name=interaction_ids,json=interactionIds,proto3" json:"interaction_ids,omitempty"`
	PageInstanceIds []string               `protobuf:"bytes,7,rep,name=page_instance_ids,json=pageInstanceIds,proto3" json:"page_instance_ids,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *InstrumentationParams) Reset() {
	*x = InstrumentationParams{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstrumentationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentationParams) ProtoMessage() {}

func (x *InstrumentationParams) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentationParams.ProtoReflect.Descriptor instead.
func (*InstrumentationParams) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{9}
}

func (x *InstrumentationParams) GetInteractionIds() []string {
	if x != nil {
		return x.InteractionIds
	}
	return nil
}

func (x *InstrumentationParams) GetPageInstanceIds() []string {
	if x != nil {
		return x.PageInstanceIds
	}
	return nil
}

type Playback struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	Timestamp                       int64                  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PositionAsOfTimestamp           int32                  `protobuf:"varint,2,opt,name=position_as_of_timestamp,json=positionAsOfTimestamp,proto3" json:"position_as_of_timestamp,omitempty"`
	PlaybackSpeed                   float64                `protobuf:"fixed64,3,opt,name=playback_speed,json=playbackSpeed,proto3" json:"playback_speed,omitempty"`
	IsPaused                        bool                   `protobuf:"varint,4,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	CurrentTrack                    *ContextTrack          `protobuf:"bytes,5,opt,name=current_track,json=currentTrack,proto3" json:"current_track,omitempty"`
	AssociatedCurrentTrack          *ContextTrack          `protobuf:"bytes,6,opt,name=associated_current_track,json=associatedCurrentTrack,proto3,oneof" json:"associated_current_track,omitempty"`
	AssociatedPositionAsOfTimestamp *int32                 `protobuf:"varint,7,opt,name=associated_position_as_of_timestamp,json=associatedPositionAsOfTimestamp,proto3,oneof" json:"associated_position_as_of_timestamp,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *Playback) Reset() {
	*x = Playback{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Playback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Playback) ProtoMessage() {}

func (x *Playback) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Playback.ProtoReflect.Descriptor instead.
func (*Playback) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{10}
}

func (x *Playback) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Playback) GetPositionAsOfTimestamp() int32 {
	if x != nil {
		return x.PositionAsOfTimestamp
	}
	return 0
}

func (x *Playback) GetPlaybackSpeed() float64 {
	if x != nil {
		return x.PlaybackSpeed
	}
	return 0
}

func (x *Playback) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *Playback) GetCurrentTrack() *ContextTrack {
	if x != nil {
		return x.CurrentTrack
	}
	return nil
}

func (x *Playback) GetAssociatedCurrentTrack() *ContextTrack {
	if x != nil {
		return x.AssociatedCurrentTrack
	}
	return nil
}

func (x *Playback) GetAssociatedPositionAsOfTimestamp() int32 {
	if x != nil && x.AssociatedPositionAsOfTimestamp != nil {
		return *x.AssociatedPositionAsOfTimestamp
	}
	return 0
}

type Queue struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Tracks         []*ContextTrack        `protobuf:"bytes,1,rep,name=tracks,proto3" json:"tracks,omitempty"`
	IsPlayingQueue bool                   `protobuf:"varint,2,opt,name=is_playing_queue,json=isPlayingQueue,proto3" json:"is_playing_queue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Queue) Reset() {
	*x = Queue{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Queue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Queue) ProtoMessage() {}

func (x *Queue) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Queue.ProtoReflect.Descriptor instead.
func (*Queue) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{11}
}

func (x *Queue) GetTracks() []*ContextTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

func (x *Queue) GetIsPlayingQueue() bool {
	if x != nil {
		return x.IsPlayingQueue
	}
	return false
}

type Session struct {
	state                 protoimpl.MessageState        `protogen:"open.v1"`
	PlayOrigin            *PlayOrigin                   `protobuf:"bytes,1,opt,name=play_origin,json=playOrigin,proto3" json:"play_origin,omitempty"`
	Context               *Context                      `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	CurrentUid            string                        `protobuf:"bytes,3,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	OptionOverrides       *ContextPlayerOptionOverrides `protobuf:"bytes,4,opt,name=option_overrides,json=optionOverrides,proto3" json:"option_overrides,omitempty"`
	Suppressions          *Suppressions                 `protobuf:"bytes,5,opt,name=suppressions,proto3" json:"suppressions,omitempty"`
	InstrumentationParams *InstrumentationParams        `protobuf:"bytes,6,opt,name=instrumentation_params,json=instrumentationParams,proto3" json:"instrumentation_params,omitempty"`
	ShuffleSeed           *string                       `protobuf:"bytes,7,opt,name=shuffle_seed,json=shuffleSeed,proto3,oneof" json:"shuffle_seed,omitempty"`
	MainContext           *Context                      `protobuf:"bytes,8,opt,name=main_context,json=mainContext,proto3,oneof" json:"main_context,omitempty"`
	OriginalSessionId     *string                       `protobuf:"bytes,9,opt,name=original_session_id,json=originalSessionId,proto3,oneof" json:"original_session_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Session) Reset() {
	*x = Session{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Session) ProtoMessage() {}

func (x *Session) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Session.ProtoReflect.Descriptor instead.
func (*Session) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{12}
}

func (x *Session) GetPlayOrigin() *PlayOrigin {
	if x != nil {
		return x.PlayOrigin
	}
	return nil
}

func (x *Session) GetContext() *Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Session) GetCurrentUid() string {
	if x != nil {
		return x.CurrentUid
	}
	return ""
}

func (x *Session) GetOptionOverrides() *ContextPlayerOptionOverrides {
	if x != nil {
		return x.OptionOverrides
	}
	return nil
}

func (x *Session) GetSuppressions() *Suppressions {
	if x != nil {
		return x.Suppressions
	}
	return nil
}

func (x *Session) GetInstrumentationParams() *InstrumentationParams {
	if x != nil {
		return x.InstrumentationParams
	}
	return nil
}

func (x *Session) GetShuffleSeed() string {
	if x != nil && x.ShuffleSeed != nil {
		return *x.ShuffleSeed
	}
	return ""
}

func (x *Session) GetMainContext() *Context {
	if x != nil {
		return x.MainContext
	}
	return nil
}

func (x *Session) GetOriginalSessionId() string {
	if x != nil && x.OriginalSessionId != nil {
		return *x.OriginalSessionId
	}
	return ""
}

type TransferState struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Options        *ContextPlayerOptions  `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Playback       *Playback              `protobuf:"bytes,2,opt,name=playback,proto3" json:"playback,omitempty"`
	CurrentSession *Session               `protobuf:"bytes,3,opt,name=current_session,json=currentSession,proto3" json:"current_session,omitempty"`
	Queue          *Queue                 `protobuf:"bytes,4,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TransferState) Reset() {
	*x = TransferState{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransferState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferState) ProtoMessage() {}

func (x *TransferState) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferState.ProtoReflect.Descriptor instead.
func (*TransferState) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{13}
}

func (x *TransferState) GetOptions() *ContextPlayerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *TransferState) GetPlayback() *Playback {
	if x != nil {
		return x.Playback
	}
	return nil
}

func (x *TransferState) GetCurrentSession() *Session {
	if x != nil {
		return x.CurrentSession
	}
	return nil
}

func (x *TransferState) GetQueue() *Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

type ContextTrack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Uid           string                 `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid           []byte                 `protobuf:"bytes,3,opt,name=gid,proto3" json:"gid,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextTrack) Reset() {
	*x = ContextTrack{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextTrack) ProtoMessage() {}

func (x *ContextTrack) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextTrack.ProtoReflect.Descriptor instead.
func (*ContextTrack) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{14}
}

func (x *ContextTrack) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *ContextTrack) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *ContextTrack) GetGid() []byte {
	if x != nil {
		return x.Gid
	}
	return nil
}

func (x *ContextTrack) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type ContextPlayerOptionOverrides struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShufflingContext bool                   `protobuf:"varint,1,opt,name=shuffling_context,json=shufflingContext,proto3" json:"shuffling_context,omitempty"`
	RepeatingContext bool                   `protobuf:"varint,2,opt,name=repeating_context,json=repeatingContext,proto3" json:"repeating_context,omitempty"`
	RepeatingTrack   bool                   `protobuf:"varint,3,opt,name=repeating_track,json=repeatingTrack,proto3" json:"repeating_track,omitempty"`
	PlaybackSpeed    *float32               `protobuf:"fixed32,4,opt,name=playback_speed,json=playbackSpeed,proto3,oneof" json:"playback_speed,omitempty"`
	Modes            map[string]string      `protobuf:"bytes,5,rep,name=modes,proto3" json:"modes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ContextPlayerOptionOverrides) Reset() {
	*x = ContextPlayerOptionOverrides{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPlayerOptionOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPlayerOptionOverrides) ProtoMessage() {}

func (x *ContextPlayerOptionOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPlayerOptionOverrides.ProtoReflect.Descriptor instead.
func (*ContextPlayerOptionOverrides) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{15}
}

func (x *ContextPlayerOptionOverrides) GetShufflingContext() bool {
	if x != nil {
		return x.ShufflingContext
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetRepeatingContext() bool {
	if x != nil {
		return x.RepeatingContext
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetRepeatingTrack() bool {
	if x != nil {
		return x.RepeatingTrack
	}
	return false
}

func (x *ContextPlayerOptionOverrides) GetPlaybackSpeed() float32 {
	if x != nil && x.PlaybackSpeed != nil {
		return *x.PlaybackSpeed
	}
	return 0
}

func (x *ContextPlayerOptionOverrides) GetModes() map[string]string {
	if x != nil {
		return x.Modes
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uri           string                 `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Restrictions  *Restrictions          `protobuf:"bytes,4,opt,name=restrictions,proto3" json:"restrictions,omitempty"`
	Pages         []*ContextPage         `protobuf:"bytes,5,rep,name=pages,proto3" json:"pages,omitempty"`
	Loading       bool                   `protobuf:"varint,6,opt,name=loading,proto3" json:"loading,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Context) Reset() {
	*x = Context{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{16}
}

func (x *Context) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Context) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Context) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Context) GetRestrictions() *Restrictions {
	if x != nil {
		return x.Restrictions
	}
	return nil
}

func (x *Context) GetPages() []*ContextPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

func (x *Context) GetLoading() bool {
	if x != nil {
		return x.Loading
	}
	return false
}

type ContextPage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PageUrl       string                 `protobuf:"bytes,1,opt,name=page_url,json=pageUrl,proto3" json:"page_url,omitempty"`
	NextPageUrl   string                 `protobuf:"bytes,2,opt,name=next_page_url,json=nextPageUrl,proto3" json:"next_page_url,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Tracks        []*ContextTrack        `protobuf:"bytes,4,rep,name=tracks,proto3" json:"tracks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContextPage) Reset() {
	*x = ContextPage{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContextPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextPage) ProtoMessage() {}

func (x *ContextPage) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextPage.ProtoReflect.Descriptor instead.
func (*ContextPage) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{17}
}

func (x *ContextPage) GetPageUrl() string {
	if x != nil {
		return x.PageUrl
	}
	return ""
}

func (x *ContextPage) GetNextPageUrl() string {
	if x != nil {
		return x.NextPageUrl
	}
	return ""
}

func (x *ContextPage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ContextPage) GetTracks() []*ContextTrack {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type PlaybackQuality struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	BitrateLevel           BitrateLevel           `protobuf:"varint,1,opt,name=bitrate_level,json=bitrateLevel,proto3,enum=spotify.connectstate.BitrateLevel" json:"bitrate_level,omitempty"`
	Strategy               BitrateStrategy        `protobuf:"varint,2,opt,name=strategy,proto3,enum=spotify.connectstate.BitrateStrategy" json:"strategy,omitempty"`
	TargetBitrateLevel     BitrateLevel           `protobuf:"varint,3,opt,name=target_bitrate_level,json=targetBitrateLevel,proto3,enum=spotify.connectstate.BitrateLevel" json:"target_bitrate_level,omitempty"`
	TargetBitrateAvailable bool                   `protobuf:"varint,4,opt,name=target_bitrate_available,json=targetBitrateAvailable,proto3" json:"target_bitrate_available,omitempty"`
	HifiStatus             HiFiStatus             `protobuf:"varint,5,opt,name=hifi_status,json=hifiStatus,proto3,enum=spotify.connectstate.HiFiStatus" json:"hifi_status,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *PlaybackQuality) Reset() {
	*x = PlaybackQuality{}
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlaybackQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaybackQuality) ProtoMessage() {}

func (x *PlaybackQuality) ProtoReflect() protoreflect.Message {
	mi := &file_spotify_connectstate_connect_player_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaybackQuality.ProtoReflect.Descriptor instead.
func (*PlaybackQuality) Descriptor() ([]byte, []int) {
	return file_spotify_connectstate_connect_player_proto_rawDescGZIP(), []int{18}
}

func (x *PlaybackQuality) GetBitrateLevel() BitrateLevel {
	if x != nil {
		return x.BitrateLevel
	}
	return BitrateLevel_UNKNOWN_BITRATE_LEVEL
}

func (x *PlaybackQuality) GetStrategy() BitrateStrategy {
	if x != nil {
		return x.Strategy
	}
	return BitrateStrategy_UNKNOWN_BITRATE_STRATEGY
}

func (x *PlaybackQuality) GetTargetBitrateLevel() BitrateLevel {
	if x != nil {
		return x.TargetBitrateLevel
	}
	return BitrateLevel_UNKNOWN_BITRATE_LEVEL
}

func (x *PlaybackQuality) GetTargetBitrateAvailable() bool {
	if x != nil {
		return x.TargetBitrateAvailable
	}
	return false
}

func (x *PlaybackQuality) GetHifiStatus() HiFiStatus {
	if x != nil {
		return x.HifiStatus
	}
	return HiFiStatus_NONE
}

var File_spotify_connectstate_connect_player_proto protoreflect.FileDescriptor

const file_spotify_connectstate_connect_player_proto_rawDesc = "" +
	"\n" +
	")spotify/connectstate/connect_player.proto\x12\x14spotify.connectstate\"\xf2\f\n" +
	"\vPlayerState\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x12\x1f\n" +
	"\vcontext_uri\x18\x02 \x01(\tR\n" +
	"contextUri\x12\x1f\n" +
	"\vcontext_url\x18\x03 \x01(\tR\n" +
	"contextUrl\x12U\n" +
	"\x14context_restrictions\x18\x04 \x01(\v2\".spotify.connectstate.RestrictionsR\x13contextRestrictions\x12A\n" +
	"\vplay_origin\x18\x05 \x01(\v2 .spotify.connectstate.PlayOriginR\n" +
	"playOrigin\x128\n" +
	"\x05index\x18\x06 \x01(\v2\".spotify.connectstate.ContextIndexR\x05index\x129\n" +
	"\x05track\x18\a \x01(\v2#.spotify.connectstate.ProvidedTrackR\x05track\x12\x1f\n" +
	"\vplayback_id\x18\b \x01(\tR\n" +
	"playbackId\x12%\n" +
	"\x0eplayback_speed\x18\t \x01(\x01R\rplaybackSpeed\x127\n" +
	"\x18position_as_of_timestamp\x18\n" +
	" \x01(\x03R\x15positionAsOfTimestamp\x12\x1a\n" +
	"\bduration\x18\v \x01(\x03R\bduration\x12\x1d\n" +
	"\n" +
	"is_playing\x18\f \x01(\bR\tisPlaying\x12\x1b\n" +
	"\tis_paused\x18\r \x01(\bR\bisPaused\x12!\n" +
	"\fis_buffering\x18\x0e \x01(\bR\visBuffering\x12.\n" +
	"\x13is_system_initiated\x18\x0f \x01(\bR\x11isSystemInitiated\x12D\n" +
	"\aoptions\x18\x10 \x01(\v2*.spotify.connectstate.ContextPlayerOptionsR\aoptions\x12F\n" +
	"\frestrictions\x18\x11 \x01(\v2\".spotify.connectstate.RestrictionsR\frestrictions\x12F\n" +
	"\fsuppressions\x18\x12 \x01(\v2\".spotify.connectstate.SuppressionsR\fsuppressions\x12D\n" +
	"\vprev_tracks\x18\x13 \x03(\v2#.spotify.connectstate.ProvidedTrackR\n" +
	"prevTracks\x12D\n" +
	"\vnext_tracks\x18\x14 \x03(\v2#.spotify.connectstate.ProvidedTrackR\n" +
	"nextTracks\x12a\n" +
	"\x10context_metadata\x18\x15 \x03(\v26.spotify.connectstate.PlayerState.ContextMetadataEntryR\x0fcontextMetadata\x12X\n" +
	"\rpage_metadata\x18\x16 \x03(\v23.spotify.connectstate.PlayerState.PageMetadataEntryR\fpageMetadata\x12\x1d\n" +
	"\n" +
	"session_id\x18\x17 \x01(\tR\tsessionId\x12%\n" +
	"\x0equeue_revision\x18\x18 \x01(\tR\rqueueRevision\x12\x1a\n" +
	"\bposition\x18\x19 \x01(\x03R\bposition\x12P\n" +
	"\x10playback_quality\x18  \x01(\v2%.spotify.connectstate.PlaybackQualityR\x0fplaybackQuality\x12\x18\n" +
	"\asignals\x18! \x03(\tR\asignals\x12,\n" +
	"\x12session_command_id\x18# \x01(\tR\x10sessionCommandId\x1aB\n" +
	"\x14ContextMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11PageMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x1a\x10\x1bJ\x04\b\x1b\x10\x1cJ\x04\b\x1c\x10\x1dJ\x04\b\x1d\x10\x1eJ\x04\b\x1e\x10\x1fJ\x04\b\x1f\x10 J\x04\b\"\x10#\"\xed\x03\n" +
	"\rProvidedTrack\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12M\n" +
	"\bmetadata\x18\x03 \x03(\v21.spotify.connectstate.ProvidedTrack.MetadataEntryR\bmetadata\x12\x18\n" +
	"\aremoved\x18\x04 \x03(\tR\aremoved\x12\x18\n" +
	"\ablocked\x18\x05 \x03(\tR\ablocked\x12\x1a\n" +
	"\bprovider\x18\x06 \x01(\tR\bprovider\x12F\n" +
	"\frestrictions\x18\a \x01(\v2\".spotify.connectstate.RestrictionsR\frestrictions\x12\x1b\n" +
	"\talbum_uri\x18\b \x01(\tR\balbumUri\x12)\n" +
	"\x10disallow_reasons\x18\t \x03(\tR\x0fdisallowReasons\x12\x1d\n" +
	"\n" +
	"artist_uri\x18\n" +
	" \x01(\tR\tartistUri\x12-\n" +
	"\x12disallow_undecided\x18\v \x03(\tR\x11disallowUndecided\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"8\n" +
	"\fContextIndex\x12\x12\n" +
	"\x04page\x18\x01 \x01(\rR\x04page\x12\x14\n" +
	"\x05track\x18\x02 \x01(\rR\x05track\"\xc3\x01\n" +
	"\x10ModeRestrictions\x12J\n" +
	"\x06values\x18\x01 \x03(\v22.spotify.connectstate.ModeRestrictions.ValuesEntryR\x06values\x1ac\n" +
	"\vValuesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12>\n" +
	"\x05value\x18\x02 \x01(\v2(.spotify.connectstate.RestrictionReasonsR\x05value:\x028\x01\".\n" +
	"\x12RestrictionReasons\x12\x18\n" +
	"\areasons\x18\x01 \x03(\tR\areasons\"\xc7\x12\n" +
	"\fRestrictions\x128\n" +
	"\x18disallow_pausing_reasons\x18\x01 \x03(\tR\x16disallowPausingReasons\x12:\n" +
	"\x19disallow_resuming_reasons\x18\x02 \x03(\tR\x17disallowResumingReasons\x128\n" +
	"\x18disallow_seeking_reasons\x18\x03 \x03(\tR\x16disallowSeekingReasons\x12A\n" +
	"\x1ddisallow_peeking_prev_reasons\x18\x04 \x03(\tR\x1adisallowPeekingPrevReasons\x12A\n" +
	"\x1ddisallow_peeking_next_reasons\x18\x05 \x03(\tR\x1adisallowPeekingNextReasons\x12C\n" +
	"\x1edisallow_skipping_prev_reasons\x18\x06 \x03(\tR\x1bdisallowSkippingPrevReasons\x12C\n" +
	"\x1edisallow_skipping_next_reasons\x18\a \x03(\tR\x1bdisallowSkippingNextReasons\x12V\n" +
	"(disallow_toggling_repeat_context_reasons\x18\b \x03(\tR$disallowTogglingRepeatContextReasons\x12R\n" +
	"&disallow_toggling_repeat_track_reasons\x18\t \x03(\tR\"disallowTogglingRepeatTrackReasons\x12I\n" +
	"!disallow_toggling_shuffle_reasons\x18\n" +
	" \x03(\tR\x1edisallowTogglingShuffleReasons\x12;\n" +
	"\x1adisallow_set_queue_reasons\x18\v \x03(\tR\x17disallowSetQueueReasons\x12S\n" +
	"&disallow_interrupting_playback_reasons\x18\f \x03(\tR#disallowInterruptingPlaybackReasons\x12S\n" +
	"&disallow_transferring_playback_reasons\x18\r \x03(\tR#disallowTransferringPlaybackReasons\x12E\n" +
	"\x1fdisallow_remote_control_reasons\x18\x0e \x03(\tR\x1cdisallowRemoteControlReasons\x12[\n" +
	"+disallow_inserting_into_next_tracks_reasons\x18\x0f \x03(\tR&disallowInsertingIntoNextTracksReasons\x12a\n" +
	".disallow_inserting_into_context_tracks_reasons\x18\x10 \x03(\tR)disallowInsertingIntoContextTracksReasons\x12Y\n" +
	"*disallow_reordering_in_next_tracks_reasons\x18\x11 \x03(\tR%disallowReorderingInNextTracksReasons\x12_\n" +
	"-disallow_reordering_in_context_tracks_reasons\x18\x12 \x03(\tR(disallowReorderingInContextTracksReasons\x12Y\n" +
	"*disallow_removing_from_next_tracks_reasons\x18\x13 \x03(\tR%disallowRemovingFromNextTracksReasons\x12_\n" +
	"-disallow_removing_from_context_tracks_reasons\x18\x14 \x03(\tR(disallowRemovingFromContextTracksReasons\x12I\n" +
	"!disallow_updating_context_reasons\x18\x15 \x03(\tR\x1edisallowUpdatingContextReasons\x128\n" +
	"\x18disallow_playing_reasons\x18\x16 \x03(\tR\x16disallowPlayingReasons\x12:\n" +
	"\x19disallow_stopping_reasons\x18\x17 \x03(\tR\x17disallowStoppingReasons\x12@\n" +
	"\x1ddisallow_add_to_queue_reasons\x18\x18 \x03(\tR\x19disallowAddToQueueReasons\x12T\n" +
	"'disallow_setting_playback_speed_reasons\x18\x19 \x03(\tR#disallowSettingPlaybackSpeedReasons\x12r\n" +
	"\x16disallow_setting_modes\x18\x1c \x03(\v2<.spotify.connectstate.Restrictions.DisallowSettingModesEntryR\x14disallowSettingModes\x12b\n" +
	"\x10disallow_signals\x18\x1d \x03(\v27.spotify.connectstate.Restrictions.DisallowSignalsEntryR\x0fdisallowSignals\x1ao\n" +
	"\x19DisallowSettingModesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\v2&.spotify.connectstate.ModeRestrictionsR\x05value:\x028\x01\x1al\n" +
	"\x14DisallowSignalsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12>\n" +
	"\x05value\x18\x02 \x01(\v2(.spotify.connectstate.RestrictionReasonsR\x05value:\x028\x01J\x04\b\x1a\x10\x1bJ\x04\b\x1b\x10\x1c\"\x8a\x03\n" +
	"\n" +
	"PlayOrigin\x12-\n" +
	"\x12feature_identifier\x18\x01 \x01(\tR\x11featureIdentifier\x12'\n" +
	"\x0ffeature_version\x18\x02 \x01(\tR\x0efeatureVersion\x12\x19\n" +
	"\bview_uri\x18\x03 \x01(\tR\aviewUri\x12+\n" +
	"\x11external_referrer\x18\x04 \x01(\tR\x10externalReferrer\x12/\n" +
	"\x13referrer_identifier\x18\x05 \x01(\tR\x12referrerIdentifier\x12+\n" +
	"\x11device_identifier\x18\x06 \x01(\tR\x10deviceIdentifier\x12'\n" +
	"\x0ffeature_classes\x18\a \x03(\tR\x0efeatureClasses\x12:\n" +
	"\x16restriction_identifier\x18\b \x01(\tH\x00R\x15restrictionIdentifier\x88\x01\x01B\x19\n" +
	"\x17_restriction_identifier\"\xdf\x02\n" +
	"\x14ContextPlayerOptions\x12+\n" +
	"\x11shuffling_context\x18\x01 \x01(\bR\x10shufflingContext\x12+\n" +
	"\x11repeating_context\x18\x02 \x01(\bR\x10repeatingContext\x12'\n" +
	"\x0frepeating_track\x18\x03 \x01(\bR\x0erepeatingTrack\x12*\n" +
	"\x0eplayback_speed\x18\x04 \x01(\x02H\x00R\rplaybackSpeed\x88\x01\x01\x12K\n" +
	"\x05modes\x18\x05 \x03(\v25.spotify.connectstate.ContextPlayerOptions.ModesEntryR\x05modes\x1a8\n" +
	"\n" +
	"ModesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0f_playback_speed\",\n" +
	"\fSuppressions\x12\x1c\n" +
	"\tproviders\x18\x01 \x03(\tR\tproviders\"l\n" +
	"\x15InstrumentationParams\x12'\n" +
	"\x0finteraction_ids\x18\x06 \x03(\tR\x0einteractionIds\x12*\n" +
	"\x11page_instance_ids\x18\a \x03(\tR\x0fpageInstanceIds\"\xe9\x03\n" +
	"\bPlayback\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x03R\ttimestamp\x127\n" +
	"\x18position_as_of_timestamp\x18\x02 \x01(\x05R\x15positionAsOfTimestamp\x12%\n" +
	"\x0eplayback_speed\x18\x03 \x01(\x01R\rplaybackSpeed\x12\x1b\n" +
	"\tis_paused\x18\x04 \x01(\bR\bisPaused\x12G\n" +
	"\rcurrent_track\x18\x05 \x01(\v2\".spotify.connectstate.ContextTrackR\fcurrentTrack\x12a\n" +
	"\x18associated_current_track\x18\x06 \x01(\v2\".spotify.connectstate.ContextTrackH\x00R\x16associatedCurrentTrack\x88\x01\x01\x12Q\n" +
	"#associated_position_as_of_timestamp\x18\a \x01(\x05H\x01R\x1fassociatedPositionAsOfTimestamp\x88\x01\x01B\x1b\n" +
	"\x19_associated_current_trackB&\n" +
	"$_associated_position_as_of_timestamp\"m\n" +
	"\x05Queue\x12:\n" +
	"\x06tracks\x18\x01 \x03(\v2\".spotify.connectstate.ContextTrackR\x06tracks\x12(\n" +
	"\x10is_playing_queue\x18\x02 \x01(\bR\x0eisPlayingQueue\"\x8f\x05\n" +
	"\aSession\x12A\n" +
	"\vplay_origin\x18\x01 \x01(\v2 .spotify.connectstate.PlayOriginR\n" +
	"playOrigin\x127\n" +
	"\acontext\x18\x02 \x01(\v2\x1d.spotify.connectstate.ContextR\acontext\x12\x1f\n" +
	"\vcurrent_uid\x18\x03 \x01(\tR\n" +
	"currentUid\x12]\n" +
	"\x10option_overrides\x18\x04 \x01(\v22.spotify.connectstate.ContextPlayerOptionOverridesR\x0foptionOverrides\x12F\n" +
	"\fsuppressions\x18\x05 \x01(\v2\".spotify.connectstate.SuppressionsR\fsuppressions\x12b\n" +
	"\x16instrumentation_params\x18\x06 \x01(\v2+.spotify.connectstate.InstrumentationParamsR\x15instrumentationParams\x12&\n" +
	"\fshuffle_seed\x18\a \x01(\tH\x00R\vshuffleSeed\x88\x01\x01\x12E\n" +
	"\fmain_context\x18\b \x01(\v2\x1d.spotify.connectstate.ContextH\x01R\vmainContext\x88\x01\x01\x123\n" +
	"\x13original_session_id\x18\t \x01(\tH\x02R\x11originalSessionId\x88\x01\x01B\x0f\n" +
	"\r_shuffle_seedB\x0f\n" +
	"\r_main_contextB\x16\n" +
	"\x14_original_session_id\"\x8c\x02\n" +
	"\rTransferState\x12D\n" +
	"\aoptions\x18\x01 \x01(\v2*.spotify.connectstate.ContextPlayerOptionsR\aoptions\x12:\n" +
	"\bplayback\x18\x02 \x01(\v2\x1e.spotify.connectstate.PlaybackR\bplayback\x12F\n" +
	"\x0fcurrent_session\x18\x03 \x01(\v2\x1d.spotify.connectstate.SessionR\x0ecurrentSession\x121\n" +
	"\x05queue\x18\x04 \x01(\v2\x1b.spotify.connectstate.QueueR\x05queue\"\xcf\x01\n" +
	"\fContextTrack\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x10\n" +
	"\x03uid\x18\x02 \x01(\tR\x03uid\x12\x10\n" +
	"\x03gid\x18\x03 \x01(\fR\x03gid\x12L\n" +
	"\bmetadata\x18\x04 \x03(\v20.spotify.connectstate.ContextTrack.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xef\x02\n" +
	"\x1cContextPlayerOptionOverrides\x12+\n" +
	"\x11shuffling_context\x18\x01 \x01(\bR\x10shufflingContext\x12+\n" +
	"\x11repeating_context\x18\x02 \x01(\bR\x10repeatingContext\x12'\n" +
	"\x0frepeating_track\x18\x03 \x01(\bR\x0erepeatingTrack\x12*\n" +
	"\x0eplayback_speed\x18\x04 \x01(\x02H\x00R\rplaybackSpeed\x88\x01\x01\x12S\n" +
	"\x05modes\x18\x05 \x03(\v2=.spotify.connectstate.ContextPlayerOptionOverrides.ModesEntryR\x05modes\x1a8\n" +
	"\n" +
	"ModesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x11\n" +
	"\x0f_playback_speed\"\xce\x02\n" +
	"\aContext\x12\x10\n" +
	"\x03uri\x18\x01 \x01(\tR\x03uri\x12\x10\n" +
	"\x03url\x18\x02 \x01(\tR\x03url\x12G\n" +
	"\bmetadata\x18\x03 \x03(\v2+.spotify.connectstate.Context.MetadataEntryR\bmetadata\x12F\n" +
	"\frestrictions\x18\x04 \x01(\v2\".spotify.connectstate.RestrictionsR\frestrictions\x127\n" +
	"\x05pages\x18\x05 \x03(\v2!.spotify.connectstate.ContextPageR\x05pages\x12\x18\n" +
	"\aloading\x18\x06 \x01(\bR\aloading\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98\x02\n" +
	"\vContextPage\x12\x19\n" +
	"\bpage_url\x18\x01 \x01(\tR\apageUrl\x12\"\n" +
	"\rnext_page_url\x18\x02 \x01(\tR\vnextPageUrl\x12K\n" +
	"\bmetadata\x18\x03 \x03(\v2/.spotify.connectstate.ContextPage.MetadataEntryR\bmetadata\x12:\n" +
	"\x06tracks\x18\x04 \x03(\v2\".spotify.connectstate.ContextTrackR\x06tracks\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01J\x04\b\x05\x10\x06\"\xf0\x02\n" +
	"\x0fPlaybackQuality\x12G\n" +
	"\rbitrate_level\x18\x01 \x01(\x0e2\".spotify.connectstate.BitrateLevelR\fbitrateLevel\x12A\n" +
	"\bstrategy\x18\x02 \x01(\x0e2%.spotify.connectstate.BitrateStrategyR\bstrategy\x12T\n" +
	"\x14target_bitrate_level\x18\x03 \x01(\x0e2\".spotify.connectstate.BitrateLevelR\x12targetBitrateLevel\x128\n" +
	"\x18target_bitrate_available\x18\x04 \x01(\bR\x16targetBitrateAvailable\x12A\n" +
	"\vhifi_status\x18\x05 \x01(\x0e2 .spotify.connectstate.HiFiStatusR\n" +
	"hifiStatus*m\n" +
	"\fBitrateLevel\x12\x19\n" +
	"\x15UNKNOWN_BITRATE_LEVEL\x10\x00\x12\a\n" +
	"\x03LOW\x10\x01\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03\x12\r\n" +
	"\tVERY_HIGH\x10\x04\x12\b\n" +
	"\x04HIFI\x10\x05\x12\n" +
	"\n" +
	"\x06HIFI24\x10\x06*\x8b\x01\n" +
	"\x0fBitrateStrategy\x12\x1c\n" +
	"\x18UNKNOWN_BITRATE_STRATEGY\x10\x00\x12\x11\n" +
	"\rBEST_MATCHING\x10\x01\x12\x13\n" +
	"\x0fBACKEND_ADVISED\x10\x02\x12\x11\n" +
	"\rOFFLINED_FILE\x10\x03\x12\x0f\n" +
	"\vCACHED_FILE\x10\x04\x12\x0e\n" +
	"\n" +
	"LOCAL_FILE\x10\x05*'\n" +
	"\n" +
	"HiFiStatus\x12\b\n" +
	"\x04NONE\x10\x00\x12\a\n" +
	"\x03OFF\x10\x01\x12\x06\n" +
	"\x02ON\x10\x02B\xdd\x01\n" +
	"\x18com.spotify.connectstateB\x12ConnectPlayerProtoP\x01Z<github.com/devgianlu/go-librespot/proto/spotify/connectstate\xa2\x02\x03SCX\xaa\x02\x14Spotify.Connectstate\xca\x02\x14Spotify\\Connectstate\xe2\x02 Spotify\\Connectstate\\GPBMetadata\xea\x02\x15Spotify::Connectstateb\x06proto3"

var (
	file_spotify_connectstate_connect_player_proto_rawDescOnce sync.Once
	file_spotify_connectstate_connect_player_proto_rawDescData []byte
)

func file_spotify_connectstate_connect_player_proto_rawDescGZIP() []byte {
	file_spotify_connectstate_connect_player_proto_rawDescOnce.Do(func() {
		file_spotify_connectstate_connect_player_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spotify_connectstate_connect_player_proto_rawDesc), len(file_spotify_connectstate_connect_player_proto_rawDesc)))
	})
	return file_spotify_connectstate_connect_player_proto_rawDescData
}

var file_spotify_connectstate_connect_player_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_spotify_connectstate_connect_player_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_spotify_connectstate_connect_player_proto_goTypes = []any{
	(BitrateLevel)(0),                    // 0: spotify.connectstate.BitrateLevel
	(BitrateStrategy)(0),                 // 1: spotify.connectstate.BitrateStrategy
	(HiFiStatus)(0),                      // 2: spotify.connectstate.HiFiStatus
	(*PlayerState)(nil),                  // 3: spotify.connectstate.PlayerState
	(*ProvidedTrack)(nil),                // 4: spotify.connectstate.ProvidedTrack
	(*ContextIndex)(nil),                 // 5: spotify.connectstate.ContextIndex
	(*ModeRestrictions)(nil),             // 6: spotify.connectstate.ModeRestrictions
	(*RestrictionReasons)(nil),           // 7: spotify.connectstate.RestrictionReasons
	(*Restrictions)(nil),                 // 8: spotify.connectstate.Restrictions
	(*PlayOrigin)(nil),                   // 9: spotify.connectstate.PlayOrigin
	(*ContextPlayerOptions)(nil),         // 10: spotify.connectstate.ContextPlayerOptions
	(*Suppressions)(nil),                 // 11: spotify.connectstate.Suppressions
	(*InstrumentationParams)(nil),        // 12: spotify.connectstate.InstrumentationParams
	(*Playback)(nil),                     // 13: spotify.connectstate.Playback
	(*Queue)(nil),                        // 14: spotify.connectstate.Queue
	(*Session)(nil),                      // 15: spotify.connectstate.Session
	(*TransferState)(nil),                // 16: spotify.connectstate.TransferState
	(*ContextTrack)(nil),                 // 17: spotify.connectstate.ContextTrack
	(*ContextPlayerOptionOverrides)(nil), // 18: spotify.connectstate.ContextPlayerOptionOverrides
	(*Context)(nil),                      // 19: spotify.connectstate.Context
	(*ContextPage)(nil),                  // 20: spotify.connectstate.ContextPage
	(*PlaybackQuality)(nil),              // 21: spotify.connectstate.PlaybackQuality
	nil,                                  // 22: spotify.connectstate.PlayerState.ContextMetadataEntry
	nil,                                  // 23: spotify.connectstate.PlayerState.PageMetadataEntry
	nil,                                  // 24: spotify.connectstate.ProvidedTrack.MetadataEntry
	nil,                                  // 25: spotify.connectstate.ModeRestrictions.ValuesEntry
	nil,                                  // 26: spotify.connectstate.Restrictions.DisallowSettingModesEntry
	nil,                                  // 27: spotify.connectstate.Restrictions.DisallowSignalsEntry
	nil,                                  // 28: spotify.connectstate.ContextPlayerOptions.ModesEntry
	nil,                                  // 29: spotify.connectstate.ContextTrack.MetadataEntry
	nil,                                  // 30: spotify.connectstate.ContextPlayerOptionOverrides.ModesEntry
	nil,                                  // 31: spotify.connectstate.Context.MetadataEntry
	nil,                                  // 32: spotify.connectstate.ContextPage.MetadataEntry
}
var file_spotify_connectstate_connect_player_proto_depIdxs = []int32{
	8,  // 0: spotify.connectstate.PlayerState.context_restrictions:type_name -> spotify.connectstate.Restrictions
	9,  // 1: spotify.connectstate.PlayerState.play_origin:type_name -> spotify.connectstate.PlayOrigin
	5,  // 2: spotify.connectstate.PlayerState.index:type_name -> spotify.connectstate.ContextIndex
	4,  // 3: spotify.connectstate.PlayerState.track:type_name -> spotify.connectstate.ProvidedTrack
	10, // 4: spotify.connectstate.PlayerState.options:type_name -> spotify.connectstate.ContextPlayerOptions
	8,  // 5: spotify.connectstate.PlayerState.restrictions:type_name -> spotify.connectstate.Restrictions
	11, // 6: spotify.connectstate.PlayerState.suppressions:type_name -> spotify.connectstate.Suppressions
	4,  // 7: spotify.connectstate.PlayerState.prev_tracks:type_name -> spotify.connectstate.ProvidedTrack
	4,  // 8: spotify.connectstate.PlayerState.next_tracks:type_name -> spotify.connectstate.ProvidedTrack
	22, // 9: spotify.connectstate.PlayerState.context_metadata:type_name -> spotify.connectstate.PlayerState.ContextMetadataEntry
	23, // 10: spotify.connectstate.PlayerState.page_metadata:type_name -> spotify.connectstate.PlayerState.PageMetadataEntry
	21, // 11: spotify.connectstate.PlayerState.playback_quality:type_name -> spotify.connectstate.PlaybackQuality
	24, // 12: spotify.connectstate.ProvidedTrack.metadata:type_name -> spotify.connectstate.ProvidedTrack.MetadataEntry
	8,  // 13: spotify.connectstate.ProvidedTrack.restrictions:type_name -> spotify.connectstate.Restrictions
	25, // 14: spotify.connectstate.ModeRestrictions.values:type_name -> spotify.connectstate.ModeRestrictions.ValuesEntry
	26, // 15: spotify.connectstate.Restrictions.disallow_setting_modes:type_name -> spotify.connectstate.Restrictions.DisallowSettingModesEntry
	27, // 16: spotify.connectstate.Restrictions.disallow_signals:type_name -> spotify.connectstate.Restrictions.DisallowSignalsEntry
	28, // 17: spotify.connectstate.ContextPlayerOptions.modes:type_name -> spotify.connectstate.ContextPlayerOptions.ModesEntry
	17, // 18: spotify.connectstate.Playback.current_track:type_name -> spotify.connectstate.ContextTrack
	17, // 19: spotify.connectstate.Playback.associated_current_track:type_name -> spotify.connectstate.ContextTrack
	17, // 20: spotify.connectstate.Queue.tracks:type_name -> spotify.connectstate.ContextTrack
	9,  // 21: spotify.connectstate.Session.play_origin:type_name -> spotify.connectstate.PlayOrigin
	19, // 22: spotify.connectstate.Session.context:type_name -> spotify.connectstate.Context
	18, // 23: spotify.connectstate.Session.option_overrides:type_name -> spotify.connectstate.ContextPlayerOptionOverrides
	11, // 24: spotify.connectstate.Session.suppressions:type_name -> spotify.connectstate.Suppressions
	12, // 25: spotify.connectstate.Session.instrumentation_params:type_name -> spotify.connectstate.InstrumentationParams
	19, // 26: spotify.connectstate.Session.main_context:type_name -> spotify.connectstate.Context
	10, // 27: spotify.connectstate.TransferState.options:type_name -> spotify.connectstate.ContextPlayerOptions
	13, // 28: spotify.connectstate.TransferState.playback:type_name -> spotify.connectstate.Playback
	15, // 29: spotify.connectstate.TransferState.current_session:type_name -> spotify.connectstate.Session
	14, // 30: spotify.connectstate.TransferState.queue:type_name -> spotify.connectstate.Queue
	29, // 31: spotify.connectstate.ContextTrack.metadata:type_name -> spotify.connectstate.ContextTrack.MetadataEntry
	30, // 32: spotify.connectstate.ContextPlayerOptionOverrides.modes:type_name -> spotify.connectstate.ContextPlayerOptionOverrides.ModesEntry
	31, // 33: spotify.connectstate.Context.metadata:type_name -> spotify.connectstate.Context.MetadataEntry
	8,  // 34: spotify.connectstate.Context.restrictions:type_name -> spotify.connectstate.Restrictions
	20, // 35: spotify.connectstate.Context.pages:type_name -> spotify.connectstate.ContextPage
	32, // 36: spotify.connectstate.ContextPage.metadata:type_name -> spotify.connectstate.ContextPage.MetadataEntry
	17, // 37: spotify.connectstate.ContextPage.tracks:type_name -> spotify.connectstate.ContextTrack
	0,  // 38: spotify.connectstate.PlaybackQuality.bitrate_level:type_name -> spotify.connectstate.BitrateLevel
	1,  // 39: spotify.connectstate.PlaybackQuality.strategy:type_name -> spotify.connectstate.BitrateStrategy
	0,  // 40: spotify.connectstate.PlaybackQuality.target_bitrate_level:type_name -> spotify.connectstate.BitrateLevel
	2,  // 41: spotify.connectstate.PlaybackQuality.hifi_status:type_name -> spotify.connectstate.HiFiStatus
	7,  // 42: spotify.connectstate.ModeRestrictions.ValuesEntry.value:type_name -> spotify.connectstate.RestrictionReasons
	6,  // 43: spotify.connectstate.Restrictions.DisallowSettingModesEntry.value:type_name -> spotify.connectstate.ModeRestrictions
	7,  // 44: spotify.connectstate.Restrictions.DisallowSignalsEntry.value:type_name -> spotify.connectstate.RestrictionReasons
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_spotify_connectstate_connect_player_proto_init() }
func file_spotify_connectstate_connect_player_proto_init() {
	if File_spotify_connectstate_connect_player_proto != nil {
		return
	}
	file_spotify_connectstate_connect_player_proto_msgTypes[6].OneofWrappers = []any{}
	file_spotify_connectstate_connect_player_proto_msgTypes[7].OneofWrappers = []any{}
	file_spotify_connectstate_connect_player_proto_msgTypes[10].OneofWrappers = []any{}
	file_spotify_connectstate_connect_player_proto_msgTypes[12].OneofWrappers = []any{}
	file_spotify_connectstate_connect_player_proto_msgTypes[15].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spotify_connectstate_connect_player_proto_rawDesc), len(file_spotify_connectstate_connect_player_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spotify_connectstate_connect_player_proto_goTypes,
		DependencyIndexes: file_spotify_connectstate_connect_player_proto_depIdxs,
		EnumInfos:         file_spotify_connectstate_connect_player_proto_enumTypes,
		MessageInfos:      file_spotify_connectstate_connect_player_proto_msgTypes,
	}.Build()
	File_spotify_connectstate_connect_player_proto = out.File
	file_spotify_connectstate_connect_player_proto_goTypes = nil
	file_spotify_connectstate_connect_player_proto_depIdxs = nil
}
